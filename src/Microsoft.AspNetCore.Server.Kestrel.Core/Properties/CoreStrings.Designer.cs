// <auto-generated />
namespace Microsoft.AspNetCore.Server.Kestrel.Core
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class CoreStrings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.AspNetCore.Server.Kestrel.Core.CoreStrings", typeof(CoreStrings).GetTypeInfo().Assembly);

        /// <summary>
        /// Failed to bind to http://[::]:{port} (IPv6Any). Attempting to bind to http://0.0.0.0:{port} instead.
        /// </summary>
        internal static string FallbackToIPv4Any
        {
            get => GetString("FallbackToIPv4Any");
        }

        /// <summary>
        /// Failed to bind to http://[::]:{port} (IPv6Any). Attempting to bind to http://0.0.0.0:{port} instead.
        /// </summary>
        internal static string FormatFallbackToIPv4Any(object port)
            => string.Format(CultureInfo.CurrentCulture, GetString("FallbackToIPv4Any", "port"), port);

        /// <summary>
        /// Cannot write to response body after connection has been upgraded.
        /// </summary>
        internal static string ResponseStreamWasUpgraded
        {
            get => GetString("ResponseStreamWasUpgraded");
        }

        /// <summary>
        /// Cannot write to response body after connection has been upgraded.
        /// </summary>
        internal static string FormatResponseStreamWasUpgraded()
            => GetString("ResponseStreamWasUpgraded");

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
